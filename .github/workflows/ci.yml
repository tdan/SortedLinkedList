name: Build and Test

# Controls when the workflow will run.
on:
  # Triggers the workflow on push events but only for the "main" branch.
  push:
    branches: [ "master" ]
  # Triggers the workflow on pull request events targeted at the "main" branch.
  pull_request:
    branches: [ "master" ]

permissions:
  contents: read

# A workflow run is made up of one or more jobs that can run sequentially or in parallel.
jobs:
  # This job is named "build-and-test".
  build-and-test:
    # The type of runner that the job will run on. "ubuntu-latest" is a standard choice.
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job.
    steps:
      # 1. Get the code from the repository.
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.4'
          extensions: composer

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: vendor
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-

      # 4. Install project dependencies using Composer.
      # The flags are optimized for CI environments (non-interactive, faster).
      - name: Install dependencies
        run: composer install --no-progress --prefer-dist --optimize-autoloader

      # 5. Run PHP Code Sniffer to check for coding standards violations.
      - name: Run PHPCS (Code Style)
        run: ./vendor/bin/phpcs -p src/

      # 6. Run PHPStan for static analysis to find potential bugs.
      - name: Run PHPStan (Static Analysis)
        run: ./vendor/bin/phpstan analyze -c phpstan.neon

      # 7. Run the unit tests with PHPUnit. The primary goal of your request.
      - name: Run PHPUnit (Unit Tests)
        run: ./vendor/bin/phpunit tests/
